

var http = require('http');
/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var CounterTask = require('../../counter-task'),
    conf = require('../../../../conf/configure'),
    Logger          = require('../../../../logger'),
    DateUtil        = require('../../../../util/dateutil'),
    Long = require('long');

function AwsEcsClientThread() {
	if (typeof AwsEcsClientThread.instance === "object") {
		return AwsEcsClientThread.instance;
    }

    this.millicore = 0;
	this.last_milli_check = 0;
	this.check = AwsEcsClientThread.CHECK_MAX;


    this.cpu = 0;
    this.cpu_sys = 0;
    this.cpu_user = 0;
    this.mem_pct = 0;

	AwsEcsClientThread.instance = this;
};
AwsEcsClientThread.prototype = new AwsEcsClientThread();

AwsEcsClientThread.prototype.run = function() {
    var self = this;
    try {
        if (conf.aws_ecs_enabled) {
            self.intervalIndex = setInterval(function(){
                var meta_uri = process.env["ECS_CONTAINER_METADATA_URI"];
                if (meta_uri != null) {
                    self.getCpuLimit(meta_uri);
                    self.process(meta_uri);
                }
            }, conf.aws_ecs_stat_interval || 3000);

            var meta_uri = process.env["ECS_CONTAINER_METADATA_URI"];
            if (meta_uri != null) {
                this.getCpuLimit(meta_uri);
                this.process(meta_uri);
            }
        }
    } catch (e) {
        Logger.printError('WHATAP ECS-ERR ' , 'run exception', e , true);
    }
}

AwsEcsClientThread.prototype.stop = function(){
    if(this.intervalIndex){
        clearInterval(this.intervalIndex);
        this.intervalIndex = undefined;
    }
}

AwsEcsClientThread.prototype.getCpuLimit = function(meta_uri){
    var self = this;

    if (this.check < 0)
        return;
    var now = Date.now();
    if (now - DateUtil.MILLIS_PER_HOUR * 8 < this.last_milli_check)
        return;

    read(meta_uri, function(json){
        if (json && json["Limits"]) {
            var Limits = json["Limits"];
            if(Limits){ millicore = Limits["CPU"]; }
        }
    }, function(){
        self.millicore = 0;
        if (--self.check >= 0) {
            Logger.printError('WHATAP ECS-ERR ' , 'not receive limit cpu', e , true);
        }
    })
}

AwsEcsClientThread.prototype.process = function(meta_uri) {
    http.get(meta_uri + '/stats', function(res){
        var statusCode = res.statusCode;
        res.setEncoding('utf8');

        var rawData = '';
        res.on('data', function(chunk){ rawData += chunk; });
        res.on('end', function(){
            try {
                var stats = JSON.parse(rawData);

                var precpu_stats = stats["precpu_stats"];
                var cpu_stats = stats["cpu_stats"];
                var memory_stats = stats["memory_stats"];

                var system_cpu_usage = delta(precpu_stats, cpu_stats, "system_cpu_usage");

        		var precpu_usage = precpu_stats["cpu_usage"];
		        var cpu_usage = cpu_stats["cpu_usage"];

                var usage_tot = delta(precpu_usage, cpu_usage, "total_usage");
                var usage_sys = delta(precpu_usage, cpu_usage, "usage_in_kernelmode");
                var usage_usr = delta(precpu_usage, cpu_usage, "usage_in_usermode");

                this.cpu = (usage_tot * 100) / system_cpu_usage;
                this.cpu_sys = (usage_sys * 100) / system_cpu_usage;
                this.cpu_user = (usage_usr * 100) / system_cpu_usage;
        
                var mem_usage = memory_stats["usage"];
                var mem_limit = memory_stats["limit"];
        
                this.mem_pct = (mem_usage * 100) / mem_limit;

            } catch (e) {
                console.error(e.message);
            }
        });

    });
};

AwsEcsClientThread.CHECK_MAX = 3;

function read(url, succ, fail){
    http.get(url, function(res){
        var statusCode = res.statusCode;

        if (statusCode !== 200) {
            if(fail) fail();

            Logger.printError('WHATAP-999', 'read http call (not 200) ', e, true);
            return;
        }

        res.setEncoding('utf8');

        var rawData = '';
        res.on('data', function(chunk){ rawData += chunk; });
        res.on('end', function(){
            try {
                var stats = JSON.parse(rawData);
                if(succ) succ(stats);
            } catch (e) {
                if(fail) fail(e);
                Logger.printError('WHATAP-999', 'read http call (not application/json) ', e, true);
            }
        });
    }).on('error', (e) => {
        if(fail) fail(e);
        Logger.printError('WHATAP-999', 'read http call ', e, true);
    });
}

function delta(j1, j2, key) {
    var v1 = j1[key];
    var v2 = j2[key];
    return v2 - v1;
}

module.exports = new AwsEcsClientThread();
